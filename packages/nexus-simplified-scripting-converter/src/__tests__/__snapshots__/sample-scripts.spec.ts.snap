// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Numpad movement 1`] = `
{
  "description": "Move around the world with your keyboard's number pad. 8=north, 9=northeast, etc. Use '/' for in, '*' for out, '-' for up and '+' for down. The 5 key will look at the room you're in.",
  "enabled": true,
  "items": [
    {
      "code": "// Place any code here you'd like to autorun when the package is installed",
      "enabled": true,
      "name": "onInstall",
      "type": "function",
    },
    {
      "code": "// Place any code here you'd like to autorun when the package is uninstalled",
      "enabled": true,
      "name": "onUninstall",
      "type": "function",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "sw";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "97",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "sw",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "s";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "98",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "s",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "se";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "99",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "se",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "w";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "100",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "w",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "look";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "101",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "look",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "e";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "102",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "e",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "nw";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "103",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "nw",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "n";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "104",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "n",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "ne";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "105",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "ne",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "out";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "106",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "out",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "down";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "107",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "down",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "up";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "109",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "up",
      "type": "keybind",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// command action (index 0)
{
  let cmd = "in";
  if (args) {

    cmd = do_replace(cmd, args)


  }
  nexusclient.send_commands(cmd)
}",
        },
      ],
      "enabled": true,
      "key": "111",
      "key_alt": false,
      "key_ctrl": false,
      "key_shift": false,
      "name": "in",
      "type": "keybind",
    },
  ],
  "name": "numpad movement",
  "type": "group",
}
`;

exports[`timeout 1`] = `
{
  "description": "",
  "enabled": true,
  "items": [
    {
      "code": "// Place any code here you'd like to autorun when the package is installed",
      "enabled": true,
      "name": "onInstall",
      "type": "function",
    },
    {
      "code": "// Place any code here you'd like to autorun when the package is uninstalled",
      "enabled": true,
      "name": "onUninstall",
      "type": "function",
    },
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// wait action (index 0)
setTimeout(() => {
  // notify action (index 1)
  {
    let cmd = "Timeout Triggered";
    if (args) {
      cmd = do_replace(cmd, args);
      // with empty replacement argument to do general variable replacement
      cmd = nexusclient.variables().expand(cmd);
    }
    nexusclient.display_notice(cmd, "#ff0000", "#000000")
  }
}, 2036);",
        },
      ],
      "case_sensitive": true,
      "enabled": true,
      "matching": "exact",
      "name": "",
      "prefix_suffix": true,
      "text": "test timeout",
      "type": "alias",
      "whole_words": true,
    },
  ],
  "name": "timeouttestpackage",
  "type": "group",
}
`;

exports[`waitfor 1`] = `
{
  "description": "",
  "enabled": true,
  "items": [
    {
      "actions": [
        {
          "action": "script",
          "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// notify action (index 0)
{
  let cmd = "Before WaitFor";
  if (args) {
    cmd = do_replace(cmd, args);
    // with empty replacement argument to do general variable replacement
    cmd = nexusclient.variables().expand(cmd);
  }
  nexusclient.display_notice(cmd, "#ff0000", "#000000")
}
// enable action (index 1)
{
  const reflex = nexusclient.reflexes().find_by_name("trigger", "Wait For 'hi' f59a967a-3472-443c-af38-f4709b01915c", true, false, current_package);
  if (!reflex) {
    nexusclient.display_notice('Enable reflex: unable to find any trigger called "Wait For '
      hi ' f59a967a-3472-443c-af38-f4709b01915c" in ' + (current_package ? current_package : 'global reflexes'), 'red');
  } else {
    nexusclient.reflexes().enable_reflex(reflex);
  }
}
// script action (index 2)
{
  //The following two actions emulate the expire option of WaitFor
}
// wait action (index 3)
setTimeout(() => {
  // disable action (index 4)
  {
    const reflex = nexusclient.reflexes().find_by_name("trigger", "Wait For 'hi' f59a967a-3472-443c-af38-f4709b01915c", true, false, current_package);
    if (!reflex) {
      nexusclient.display_notice('Disable reflex: unable to find any trigger called "Wait For '
        hi ' f59a967a-3472-443c-af38-f4709b01915c" in ' + (current_package ? current_package : 'global reflexes'), 'red');
    } else {
      nexusclient.reflexes().disable_reflex(reflex);
    }
  }
}, 5000);",
        },
      ],
      "case_sensitive": true,
      "enabled": true,
      "matching": "exact",
      "name": "",
      "prefix_suffix": true,
      "text": "test waitfor",
      "type": "alias",
      "whole_words": true,
    },
    {
      "enabled": true,
      "items": [
        {
          "actions": [
            {
              "action": "script",
              "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// disableme action (index 0)
{
  const reflex = nexusclient.reflexes().find_by_name("trigger", "Wait For 'hi' f59a967a-3472-443c-af38-f4709b01915c", true, false, current_package);
  if (!reflex) {
    nexusclient.display_notice('Disable reflex: unable to find any trigger called "Wait For '
      hi ' f59a967a-3472-443c-af38-f4709b01915c" in ' + (current_package ? current_package : 'global reflexes'), 'red');
  } else {
    nexusclient.reflexes().disable_reflex(reflex);
  }
}
// notify action (index 1)
{
  let cmd = "After WaitFor";
  if (args) {
    cmd = do_replace(cmd, args);
    // with empty replacement argument to do general variable replacement
    cmd = nexusclient.variables().expand(cmd);
  }
  nexusclient.display_notice(cmd, "#ff0000", "#000000")
}
// enable action (index 2)
{
  const reflex = nexusclient.reflexes().find_by_name("trigger", "Wait For 'foo' 801a3a41-c5d2-4f39-bf5e-c17d94280a25", true, false, current_package);
  if (!reflex) {
    nexusclient.display_notice('Enable reflex: unable to find any trigger called "Wait For '
      foo ' 801a3a41-c5d2-4f39-bf5e-c17d94280a25" in ' + (current_package ? current_package : 'global reflexes'), 'red');
  } else {
    nexusclient.reflexes().enable_reflex(reflex);
  }
}
// script action (index 3)
{
  //The following two actions emulate the expire option of WaitFor
}
// wait action (index 4)
setTimeout(() => {
  // disable action (index 5)
  {
    const reflex = nexusclient.reflexes().find_by_name("trigger", "Wait For 'foo' 801a3a41-c5d2-4f39-bf5e-c17d94280a25", true, false, current_package);
    if (!reflex) {
      nexusclient.display_notice('Disable reflex: unable to find any trigger called "Wait For '
        foo ' 801a3a41-c5d2-4f39-bf5e-c17d94280a25" in ' + (current_package ? current_package : 'global reflexes'), 'red');
    } else {
      nexusclient.reflexes().disable_reflex(reflex);
    }
  }
}, 10000);",
            },
          ],
          "case_sensitive": false,
          "enabled": false,
          "matching": "substring",
          "name": "Wait For 'hi' f59a967a-3472-443c-af38-f4709b01915c",
          "text": "hi",
          "type": "trigger",
          "whole_words": false,
        },
        {
          "actions": [
            {
              "action": "script",
              "script": "const do_replace = (cmd, args) => {
  const prefix = args.input.substr(0, args.index);
  const posend = args.index + args[0].length;
  const suffix = args.input.substr(posend);
  const replace = {};
  replace["match"] = args[0];
  replace["line"] = args.input;
  replace["prefix"] = prefix;
  replace["suffix"] = suffix;
  if (args.length > 1) {
    for (let i = 1; i++; i < args.length) {
      replace[i] = args[i];
    }
  }
  if (args.groups) {
    for (const group in args.groups) {
      replace[group] = args.groups[group];
    }
  }
  cmd = nexusclient.variables().expand(cmd, replace);
  return cmd
}
// disableme action (index 0)
{
  const reflex = nexusclient.reflexes().find_by_name("trigger", "Wait For 'foo' 801a3a41-c5d2-4f39-bf5e-c17d94280a25", true, false, current_package);
  if (!reflex) {
    nexusclient.display_notice('Disable reflex: unable to find any trigger called "Wait For '
      foo ' 801a3a41-c5d2-4f39-bf5e-c17d94280a25" in ' + (current_package ? current_package : 'global reflexes'), 'red');
  } else {
    nexusclient.reflexes().disable_reflex(reflex);
  }
}
// notify action (index 1)
{
  let cmd = "after second WaitFor";
  if (args) {
    cmd = do_replace(cmd, args);
    // with empty replacement argument to do general variable replacement
    cmd = nexusclient.variables().expand(cmd);
  }
  nexusclient.display_notice(cmd, "#ff0000", "#000000")
}",
            },
          ],
          "case_sensitive": true,
          "enabled": false,
          "matching": "substring",
          "name": "Wait For 'foo' 801a3a41-c5d2-4f39-bf5e-c17d94280a25",
          "text": "foo",
          "type": "trigger",
          "whole_words": false,
        },
      ],
      "name": "Generated WaitFor Triggers",
      "type": "group",
    },
  ],
  "name": "waitfortestpackage",
  "type": "group",
}
`;
