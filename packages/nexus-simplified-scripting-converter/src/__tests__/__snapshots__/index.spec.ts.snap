// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to convert command actions 1`] = `
"{
    let cmd = "foo";
    if(args){
      const prefix = args.input.substr(0, args.index);
      const posend = args.index + args[0].length;
      const suffix = args.input.substr(posend);
      const replace = {};
      replace["match"] = args[0];
      replace["line"] = args.input;
      replace["prefix"] = prefix;
      replace["suffix"] = suffix;
      if(args.length > 1){
        for(let i = 1; i++; i < args.length){
          replace[i] = args[i];
        }
      }
      if(args.groups){
        for(const group in args.groups){
          replace[group] = args.groups[group];
        }
      }
      cmd = nexusclient.variables().expand(cmd, replace);

      if(prefix){
        cmd = prefix + cmd;
      }
      if(suffix){
        cmd = cmd + suffix;
      }

    }
    nexusclient.send_command(cmd)
  }
  "
`;

exports[`Should be able to convert command actions without suffix 1`] = `
"{
    let cmd = "foo";
    if(args){
      const prefix = args.input.substr(0, args.index);
      const posend = args.index + args[0].length;
      const suffix = args.input.substr(posend);
      const replace = {};
      replace["match"] = args[0];
      replace["line"] = args.input;
      replace["prefix"] = prefix;
      replace["suffix"] = suffix;
      if(args.length > 1){
        for(let i = 1; i++; i < args.length){
          replace[i] = args[i];
        }
      }
      if(args.groups){
        for(const group in args.groups){
          replace[group] = args.groups[group];
        }
      }
      cmd = nexusclient.variables().expand(cmd, replace);

      
    }
    nexusclient.send_command(cmd)
  }
  "
`;

exports[`Should be able to convert disable actions 1`] = `
"{
  const reflex = nexusclient.reflexes().find_by_name("alias", "foo", true, false, current_package);
  if(!reflex){
    nexusclient.display_notice('Disable reflex: unable to find any alias called "foo" in ' + (current_package?current_package:'global reflexes'), 'red');
  }else{
    nexusclient.reflexes().disable_reflex(reflex);
  }
}
"
`;

exports[`Should be able to convert enable actions 1`] = `
"{
  const reflex = nexusclient.reflexes().find_by_name("alias", "foo", true, false, current_package);
  if(!reflex){
    nexusclient.display_notice('Enable reflex: unable to find any alias called "foo" in ' + (current_package?current_package:'global reflexes'), 'red');
  }else{
    nexusclient.reflexes().enable_reflex(reflex);
  }
}
"
`;

exports[`Should be able to convert function actions 1`] = `
"nexusclient.reflexes().run_function("foo")
"
`;

exports[`Should be able to convert script actions 1`] = `
"{
  console.log('foo')
}
"
`;

exports[`Should be able to handle empty packages 1`] = `
{
  "description": "",
  "enabled": true,
  "id": 1,
  "items": [],
  "name": "TestPackage",
  "type": "group",
}
`;

exports[`Should be able to handle groups 1`] = `
{
  "description": "",
  "enabled": true,
  "id": 1,
  "items": [
    {
      "enabled": true,
      "id": 2,
      "items": [],
      "name": "group",
      "type": "group",
    },
  ],
  "name": "TestPackage",
  "type": "group",
}
`;

exports[`Should not convert function actions with empty function name 1`] = `""`;
