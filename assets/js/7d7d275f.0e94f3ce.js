"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4288],{3905:(e,n,t)=>{t.d(n,{kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(t),c=r,k=d["".concat(u,".").concat(c)]||d[c]||p[c]||i;return t?a.createElement(k,l(l({ref:n},m),{},{components:t})):a.createElement(k,l({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:4,id:"api"},l="API",o={unversionedId:"queue-manager/api",id:"queue-manager/api",title:"API",description:"The queue manager has an API that is split in 2 parts: one for client side usage and one for tracking of game-queue events.",source:"@site/docs/queue-manager/api.md",sourceDirName:"queue-manager",slug:"/queue-manager/api",permalink:"/nexus-scripts/docs/queue-manager/api",draft:!1,editUrl:"https://github.com/keneanung/nexus-scripts/edit/development/website/docs/queue-manager/api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"api"},sidebar:"tutorialSidebar",previous:{title:"Using the queue manager in external TypeScript projects",permalink:"/nexus-scripts/docs/queue-manager/advanced_usage/external_ts"}},u={},s=[{value:"Client Side Usage",id:"client-side-usage",level:2},{value:"<code>getQueue()</code>",id:"getqueue",level:3},{value:"Return Value",id:"return-value",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>do(command, itemProperties, consumesBalance, [repeat])</code>",id:"docommand-itemproperties-consumesbalance-repeat",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>undo(command)</code>",id:"undocommand",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Server Side Tracking",id:"server-side-tracking",level:2}],m={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api"},"API"),(0,r.kt)("p",null,"The queue manager has an API that is split in 2 parts: one for client side usage and one for tracking of game-queue events."),(0,r.kt)("h2",{id:"client-side-usage"},"Client Side Usage"),(0,r.kt)("h3",{id:"getqueue"},(0,r.kt)("inlineCode",{parentName:"h3"},"getQueue()")),(0,r.kt)("h4",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(QueuedItem | UnsyncedItem)[]")," - The current queue"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Returns the current queue. Each item contains the keys ",(0,r.kt)("inlineCode",{parentName:"p"},"command"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," with the individual balance settings, whether the command will be repeated and if it consumes balance (",(0,r.kt)("strong",{parentName:"p"},"Note"),": all actions queued externally are assumed to consume balance)."),(0,r.kt)("p",null,"If an action is only in the local queue, but not in the in-game queue yet, it will also have the key ",(0,r.kt)("inlineCode",{parentName:"p"},"queueing")," (sent to the game, but not confirmed yet), while items in the in-game queue have the key ",(0,r.kt)("inlineCode",{parentName:"p"},"locallyControlled")," to mark whether the queue manager added the command or not."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.getQueue()\n")),(0,r.kt)("h3",{id:"docommand-itemproperties-consumesbalance-repeat"},(0,r.kt)("inlineCode",{parentName:"h3"},"do(command, itemProperties, consumesBalance, [repeat])")),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"command"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," - The command to run"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"itemProperties"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," - The balance requirements of the command. Each key denotes whether the balance must be available (",(0,r.kt)("inlineCode",{parentName:"p"},"true"),") or must be off-balance (",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"). Non-existing keys don't play a role:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haveBalance"),": physical balance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haveEq"),": equilibrium"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haveClassBalance"),": class specific balance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haveShipBalance"),": ship command balance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haveParalysis"),": whether the paralysis affliction must be on the character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beBound"),": whether the character must be bound (writhe type afflicitions)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beStanding"),": whether the character must be upright (standing)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beStunned"),":  whether the character must be stunned")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"consumesBalance"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," - Whether the command consumes the given balances. This helps the script to decide, whether it can queue multiple things at once."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"repeat"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),", optional - Whether the command should be requeued after it ran. ",(0,r.kt)("strong",{parentName:"p"},"NOTE")," This can potentially spam the game if commands that don't consume balances are requeued. Default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,"Queues a given command. The command will take care of allowed queue lengths, queueing only 1 command that consumes balance at a time and requeueing if needed."),(0,r.kt)("p",null,"It will also translate the readable queue properties into in-game balance requirements."),(0,r.kt)("p",null,"Commands are queued as-is and not translated or put into aliases."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('sit', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true\n}, false)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('kill dummy', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true,\n  beBound: false,\n  beStunned: false,\n  haveParalysis: false\n}, true);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('kill', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true,\n  beBound: false,\n  beStunned: false,\n  haveParalysis: false\n}, true, true);\n")),(0,r.kt)("h3",{id:"undocommand"},(0,r.kt)("inlineCode",{parentName:"h3"},"undo(command)")),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"command"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," - The command to remove from the queue."),(0,r.kt)("h4",{id:"return-value-1"},"Return Value"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," - Whether a command to remove was found."),(0,r.kt)("h4",{id:"description-2"},"Description"),(0,r.kt)("p",null,"Removes a ",(0,r.kt)("em",{parentName:"p"},"locally controlled")," command from the queue. These can be still in the local queue or already in the in-game queue. Repeating queued commands are also removed and not requeued."),(0,r.kt)("p",null,"Externally controlled commands are not touched."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('sit', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true\n}, false)\n\nqueueManager.undo('sit')\n")),(0,r.kt)("h2",{id:"server-side-tracking"},"Server Side Tracking"),(0,r.kt)("p",null,"Due to not being intended for common use, these are documented in a short form."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"track: (command: string, queue: string) => void")," - Track addition of commands to the in-game queue."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clear: (queue: string) => void")," - Track clearing of the queue. The special queue ",(0,r.kt)("inlineCode",{parentName:"li"},"all")," clears it completely."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trackFirst: (command: string, queue: string) => void")," - Track queueing actions as first element."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trackAt: (position: number, command: string, queue: string) => void")," - Track queueing actions at a given position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trackReplace: (position: number, command: string, queue: string) => void")," - Track queueing actions replacing a given position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trackRemove: (position: number) => void")," - Track removing actions from the queue."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run: (command: string, queue: string) => void")," - Track running a given command."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blocked: () => void")," - Track an action getting blocked due to queue being full.")))}d.isMDXComponent=!0}}]);