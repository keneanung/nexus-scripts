"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6354],{4513:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>g,contentTitle:()=>l,default:()=>d,frontMatter:()=>p,metadata:()=>r,toc:()=>c});var t=n(7462),i=(n(7294),n(3905));n(8209);const p={sidebar_position:3,id:"api"},l="API",r={unversionedId:"package-manager/api",id:"package-manager/api",title:"API",description:"The package manager includes a public API which can be used to interact with it.",source:"@site/docs/package-manager/api.md",sourceDirName:"package-manager",slug:"/package-manager/api",permalink:"/nexus-scripts/docs/package-manager/api",draft:!1,editUrl:"https://github.com/keneanung/nexus-scripts/edit/development/website/docs/package-manager/api.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"api"},sidebar:"tutorialSidebar",previous:{title:"Basic Usage",permalink:"/nexus-scripts/docs/package-manager/basic_usage"},next:{title:"Nexus Queue Manager",permalink:"/nexus-scripts/docs/queue-manager/"}},g={},c=[{value:"<code>packageManager.updateAsync</code>",id:"packagemanagerupdateasync",level:2},{value:"<code>packageManager.getRepositoryData</code>",id:"packagemanagergetrepositorydata",level:2},{value:"<code>packageManager.install</code>",id:"packagemanagerinstall",level:2},{value:"<code>packagemanager.uninstall</code>",id:"packagemanageruninstall",level:2},{value:"<code>packageManager.isInstalled</code>",id:"packagemanagerisinstalled",level:2},{value:"<code>packageManager.onUpdateFinished</code>",id:"packagemanageronupdatefinished",level:2},{value:"<code>packageManager.onPackageOperationDone</code>",id:"packagemanageronpackageoperationdone",level:2}],s={toc:c},o="wrapper";function d(a){let{components:e,...n}=a;return(0,i.kt)(o,(0,t.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api"},"API"),(0,i.kt)("p",null,"The package manager includes a public API which can be used to interact with it."),(0,i.kt)("h2",{id:"packagemanagerupdateasync"},(0,i.kt)("inlineCode",{parentName:"h2"},"packageManager.updateAsync")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.updateAsync(): Promise<void>")),(0,i.kt)("p",null,"Updates the package listing of available packages."),(0,i.kt)("h2",{id:"packagemanagergetrepositorydata"},(0,i.kt)("inlineCode",{parentName:"h2"},"packageManager.getRepositoryData")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.getRepositoryData(): PackageEntry[]")),(0,i.kt)("p",null,"Returns the cached data of available packages."),(0,i.kt)("h2",{id:"packagemanagerinstall"},(0,i.kt)("inlineCode",{parentName:"h2"},"packageManager.install")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.installAsync(name: string): Promise<void>")),(0,i.kt)("p",null,"Installs a package with the given package name. Throws an exception if the package name is not know."),(0,i.kt)("h2",{id:"packagemanageruninstall"},(0,i.kt)("inlineCode",{parentName:"h2"},"packagemanager.uninstall")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.uninstall(name: string): void")),(0,i.kt)("p",null,"Uninstalls a package with the given package name."),(0,i.kt)("h2",{id:"packagemanagerisinstalled"},(0,i.kt)("inlineCode",{parentName:"h2"},"packageManager.isInstalled")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.isInstalled(name: string): boolean")),(0,i.kt)("p",null,"Returns whether a package is installed or not. This also returns packages with the same name that were not installed by the package manager."),(0,i.kt)("h2",{id:"packagemanageronupdatefinished"},(0,i.kt)("inlineCode",{parentName:"h2"},"packageManager.onUpdateFinished")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.onUpdateFinished(callback: (data: PackageEntry[]) => void)): void")),(0,i.kt)("p",null,"Registers a callback function that will be called whenever the update of the package listing data finishes. The callback receives the new data as first argument."),(0,i.kt)("h2",{id:"packagemanageronpackageoperationdone"},(0,i.kt)("inlineCode",{parentName:"h2"},"packageManager.onPackageOperationDone")),(0,i.kt)("p",null,"Signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"packageManager.onPackageOperationDone(callback: (operationName: boolean, packageName: string) => void): void")),(0,i.kt)("p",null,"Registers a callback function that will be called whenever a package operation finishes. These operations can be ",(0,i.kt)("inlineCode",{parentName:"p"},"install"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"uninstall"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," and are given as the first argument. The second argument is the package name, that was modified."))}d.isMDXComponent=!0}}]);