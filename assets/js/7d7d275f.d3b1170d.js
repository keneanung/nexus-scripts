"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4288],{9434:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var t=n(7462),i=(n(7294),n(3905));n(8209);const l={sidebar_position:4,id:"api"},r="API",u={unversionedId:"queue-manager/api",id:"queue-manager/api",title:"API",description:"The queue manager has an API that is split in 2 parts: one for client side usage and one for tracking of game-queue events.",source:"@site/docs/queue-manager/api.md",sourceDirName:"queue-manager",slug:"/queue-manager/api",permalink:"/nexus-scripts/docs/queue-manager/api",draft:!1,editUrl:"https://github.com/keneanung/nexus-scripts/edit/development/website/docs/queue-manager/api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"api"},sidebar:"tutorialSidebar",previous:{title:"Using the queue manager in external TypeScript projects",permalink:"/nexus-scripts/docs/queue-manager/advanced_usage/external_ts"}},o={},s=[{value:"Client Side Usage",id:"client-side-usage",level:2},{value:"<code>getQueue()</code>",id:"getqueue",level:3},{value:"Return Value",id:"return-value",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>do(command, itemProperties, consumesBalance, [repeat])</code>",id:"docommand-itemproperties-consumesbalance-repeat",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>undo(command)</code>",id:"undocommand",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Server Side Tracking",id:"server-side-tracking",level:2}],m={toc:s},d="wrapper";function p(e){let{components:a,...n}=e;return(0,i.kt)(d,(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api"},"API"),(0,i.kt)("p",null,"The queue manager has an API that is split in 2 parts: one for client side usage and one for tracking of game-queue events."),(0,i.kt)("h2",{id:"client-side-usage"},"Client Side Usage"),(0,i.kt)("h3",{id:"getqueue"},(0,i.kt)("inlineCode",{parentName:"h3"},"getQueue()")),(0,i.kt)("h4",{id:"return-value"},"Return Value"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"(QueuedItem | UnsyncedItem)[]")," - The current queue"),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Returns the current queue. Each item contains the keys ",(0,i.kt)("inlineCode",{parentName:"p"},"command"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," with the individual balance settings, whether the command will be repeated and if it consumes balance (",(0,i.kt)("strong",{parentName:"p"},"Note"),": all actions queued externally are assumed to consume balance)."),(0,i.kt)("p",null,"If an action is only in the local queue, but not in the in-game queue yet, it will also have the key ",(0,i.kt)("inlineCode",{parentName:"p"},"queueing")," (sent to the game, but not confirmed yet), while items in the in-game queue have the key ",(0,i.kt)("inlineCode",{parentName:"p"},"locallyControlled")," to mark whether the queue manager added the command or not."),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.getQueue()\n")),(0,i.kt)("h3",{id:"docommand-itemproperties-consumesbalance-repeat"},(0,i.kt)("inlineCode",{parentName:"h3"},"do(command, itemProperties, consumesBalance, [repeat])")),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"command"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," - The command to run"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"itemProperties"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," - The balance requirements of the command. Each key denotes whether the balance must be available (",(0,i.kt)("inlineCode",{parentName:"p"},"true"),") or must be off-balance (",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"). Non-existing keys don't play a role:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"haveBalance"),": physical balance"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"haveEq"),": equilibrium"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"haveClassBalance"),": class specific balance"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"haveShipBalance"),": ship command balance"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"haveParalysis"),": whether the paralysis affliction must be on the character"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beBound"),": whether the character must be bound (writhe type afflicitions)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beStanding"),": whether the character must be upright (standing)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beStunned"),":  whether the character must be stunned")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"consumesBalance"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," - Whether the command consumes the given balances. This helps the script to decide, whether it can queue multiple things at once."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"repeat"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", optional - Whether the command should be requeued after it ran. ",(0,i.kt)("strong",{parentName:"p"},"NOTE")," This can potentially spam the game if commands that don't consume balances are requeued. Default is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("p",null,"Queues a given command. The command will take care of allowed queue lengths, queueing only 1 command that consumes balance at a time and requeueing if needed."),(0,i.kt)("p",null,"It will also translate the readable queue properties into in-game balance requirements."),(0,i.kt)("p",null,"Commands are queued as-is and not translated or put into aliases."),(0,i.kt)("h4",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('sit', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true\n}, false)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('kill dummy', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true,\n  beBound: false,\n  beStunned: false,\n  haveParalysis: false\n}, true);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('kill', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true,\n  beBound: false,\n  beStunned: false,\n  haveParalysis: false\n}, true, true);\n")),(0,i.kt)("h3",{id:"undocommand"},(0,i.kt)("inlineCode",{parentName:"h3"},"undo(command)")),(0,i.kt)("h4",{id:"arguments-1"},"Arguments"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"command"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," - The command to remove from the queue."),(0,i.kt)("h4",{id:"return-value-1"},"Return Value"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," - Whether a command to remove was found."),(0,i.kt)("h4",{id:"description-2"},"Description"),(0,i.kt)("p",null,"Removes a ",(0,i.kt)("em",{parentName:"p"},"locally controlled")," command from the queue. These can be still in the local queue or already in the in-game queue. Repeating queued commands are also removed and not requeued."),(0,i.kt)("p",null,"Externally controlled commands are not touched."),(0,i.kt)("h4",{id:"examples-2"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"queueManager.do('sit', {\n  haveBalance: true,\n  haveEq: true,\n  beStanding: true\n}, false)\n\nqueueManager.undo('sit')\n")),(0,i.kt)("h2",{id:"server-side-tracking"},"Server Side Tracking"),(0,i.kt)("p",null,"Due to not being intended for common use, these are documented in a short form."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"track: (command: string, queue: string) => void")," - Track addition of commands to the in-game queue."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clear: (queue: string) => void")," - Track clearing of the queue. The special queue ",(0,i.kt)("inlineCode",{parentName:"li"},"all")," clears it completely."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trackFirst: (command: string, queue: string) => void")," - Track queueing actions as first element."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trackAt: (position: number, command: string, queue: string) => void")," - Track queueing actions at a given position."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trackReplace: (position: number, command: string, queue: string) => void")," - Track queueing actions replacing a given position."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trackRemove: (position: number) => void")," - Track removing actions from the queue."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"run: (command: string, queue: string) => void")," - Track running a given command."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blocked: () => void")," - Track an action getting blocked due to queue being full.")))}p.isMDXComponent=!0}}]);